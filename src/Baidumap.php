<?php

class BaiduMap{
	protected $MCBAND = array(12890594.86, 8362377.87, 5591021, 3481989.83, 1678043.12, 0);
	protected $MC2LL = array(
		array(1.410526172116255e-8,0.00000898305509648872,- 1.9939833816331,200.9824383106796,- 187.2403703815547,91.6087516669843,- 23.38765649603339,2.57121317296198,- 0.03801003308653,17337981.2),
		array(- 7.435856389565537e-9,0.000008983055097726239,- 0.78625201886289,96.32687599759846,- 1.85204757529826,- 59.36935905485877,47.40033549296737,- 16.50741931063887,2.28786674699375,10260144.86),
		array(- 3.030883460898826e-8,0.00000898305509983578,0.30071316287616,59.74293618442277,7.357984074871,- 25.38371002664745,13.45380521110908,- 3.29883767235584,0.32710905363475,6856817.37),
		array(- 1.981981304930552e-8,0.000008983055099779535,0.03278182852591,40.31678527705744,0.65659298677277,- 4.44255534477492,0.85341911805263,0.12923347998204,- 0.04625736007561,4482777.06),
		array(3.09191371068437e-9,0.000008983055096812155,0.00006995724062,23.10934304144901,- 0.00023663490511,- 0.6321817810242,- 0.00663494467273,0.03430082397953,- 0.00466043876332,2555164.4),
		array(2.890871144776878e-9,0.000008983055095805407,- 3.068298e-8,7.47137025468032,- 0.00000353937994,- 0.02145144861037,- 0.00001234426596,0.00010322952773,- 0.00000323890364,826088.5)
	);
	
	public function convertMC2LL($cC) {
		if(substr($cC->lng, 0, 1) == 1){
			$cC->lng = preg_replace('|^(\d{8})|', '$1.', str_replace('.', '', $cC->lng));
		}else{
			$cC->lng = (int)preg_replace('|^(\d{7})|', '$1.', str_replace('.', '', $cC->lat));
		}
		$cC->lat = (int)preg_replace('|^(\d{7})|', '$1.', $cC->lat);
		$cD = new b4(abs($cC->lng), abs($cC->lat));
		for ($cE = 0; $cE < count($this->MCBAND); $cE++) {
			if ($cD->lat >= $this->MCBAND[$cE]) {
				$cF = $this->MC2LL[$cE];
				break;
			}
		}
		$T = $this->convertor($cC, $cF);
		return $T;
	}
	
	protected function convertor ($cD, $cE) {
		if (!$cD || !$cE) {
			return;
		}
		$T = $cE[0] + $cE[1] * abs($cD->lng);
		$cC = abs($cD->lat) / $cE[9];
		$cF = $cE[2] + $cE[3] * $cC + $cE[4] * $cC * $cC + $cE[5] * $cC * $cC * $cC + $cE[6] * $cC * $cC * $cC * $cC + $cE[7] * $cC * $cC * $cC * $cC * $cC + $cE[8] * $cC * $cC * $cC * $cC * $cC * $cC;
		$T *= ($cD->lng < 0 ? - 1 : 1);
		$cF *= ($cD->lat < 0 ? - 1 : 1);
		return new b4($T, $cF);
	}
}
class b4{
	public $lng, $lat;
	public function __construct($lng, $lat) {
		$this->lng = $lng;
		$this->lat = $lat;
	}
}